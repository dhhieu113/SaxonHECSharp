name: CI - SaxonHECSharp Build

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'   # Triggers on v1.0.0, v2.0.0, etc.
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, ubuntu-24.04, macos-14]
        configuration: [Release]

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Setup Saxon Libraries
      shell: pwsh
      run: |
        $platform = "${{ matrix.os }}"
        $downloadUrl = switch ($platform) {
          "windows-2022" { "https://downloads.saxonica.com/SaxonC/EE/12/SaxonCEE-windows-x86_64-12-8-0.zip" }
          "ubuntu-24.04" { "https://downloads.saxonica.com/SaxonC/EE/12/SaxonCEE-linux-x86_64-12-8-0.zip" }
          "macos-14" { "https://downloads.saxonica.com/SaxonC/EE/12/SaxonCEE-macos-aarch64-12-8-0.zip" }
        }
        $targetDir = "SaxonHECSharp.Example/bin/${{ matrix.configuration }}/net9.0"
        $runtimesDir = Join-Path $targetDir "runtimes"
        $tempDir = "saxon-temp"
        
        # Create directories
        New-Item -ItemType Directory -Force -Path $targetDir | Out-Null
        New-Item -ItemType Directory -Force -Path $tempDir | Out-Null
        
        Write-Host "Downloading Saxon from $downloadUrl"
        # Download and extract to temp directory first
        $zipPath = "saxon-temp.zip"
        Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath
        Expand-Archive -Path $zipPath -DestinationPath $tempDir -Force
        Remove-Item $zipPath
        
        # Move files to runtimes directory
        $rid = switch ($platform) {
          "windows-2022" { "win-x64" }
          "ubuntu-24.04" { "linux-x64" }
          "macos-14" { "osx-arm64" }
        }
        
        $nativeDir = Join-Path $runtimesDir "$rid/native"
        New-Item -ItemType Directory -Force -Path $nativeDir | Out-Null
        
        Write-Host "Looking for Saxon libraries in extracted contents..."
        # Find and copy library files recursively
        Get-ChildItem -Path $tempDir -Recurse -File | 
        Where-Object { $_.Extension -in '.dll','.so','.dylib' } | 
        ForEach-Object { 
            Write-Host "Found library: $($_.FullName)"
            Copy-Item $_.FullName $nativeDir -Force 
        }
        
        # Set executable permissions on Unix-like systems
        if ($platform -ne "windows-2022") {
            Get-ChildItem -Path $nativeDir -File | ForEach-Object {
                Write-Host "Setting executable permission for: $($_.FullName)"
                chmod +x $_.FullName
            }
        }

        # Clean up extracted files
        Remove-Item -Path $tempDir -Recurse -Force
        
        # Verify setup
        $libFiles = Get-ChildItem $nativeDir
        if ($libFiles.Count -gt 0) {
            Write-Host "Saxon libraries successfully set up in $nativeDir"
            $libFiles | ForEach-Object { 
                Write-Host "Found: $($_.Name)"
                # Display file permissions on Unix-like systems
                if ($platform -ne "windows-2022") {
                    ls -l $_.FullName
                }
            }
        } else {
            Write-Error "No library files were found and copied"
            exit 1
        }

    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build Solution
      run: dotnet build SaxonHECSharp.sln --configuration ${{ matrix.configuration }}

    - name: Build Example Project
      if: always() && !cancelled()
      continue-on-error: true
      id: build-example
      shell: pwsh
      run: |
        # Verify Saxon library exists and is accessible
        $platform = "${{ matrix.os }}"
        $targetDir = "SaxonHECSharp.Example/bin/${{ matrix.configuration }}/net9.0"
        $rid = switch ($platform) {
          "windows-2022" { "win-x64" }
          "ubuntu-24.04" { "linux-x64" }
          "macos-14" { "osx-arm64" }
        }
        $nativeLibPath = "${targetDir}/runtimes/${rid}/native"
        
        Write-Host "Checking Saxon libraries in: ${nativeLibPath}"
        if (Test-Path -Path $nativeLibPath) {
            Get-ChildItem -Path $nativeLibPath | ForEach-Object {
                Write-Host "Found library: $($_.Name)"
                Write-Host "  Size: $($_.Length) bytes"
                Write-Host "  Last Write Time: $($_.LastWriteTime)"
                if ($platform -ne "windows-2022") {
                    Write-Host "  Permissions:"
                    $fileInfo = Get-ChildItem -Path $_.FullName
                    $fileInfo | Select-Object Mode, LastWriteTime, Length, Name | Format-Table -AutoSize
                }
            }
        } else {
            Write-Error "Native library directory not found: ${nativeLibPath}"
            exit 1
        }
        
        # Set up library path for macOS
        if ("${{ matrix.os }}" -eq "macos-14") {
          $nativeLibPath = Join-Path (Get-Location) "SaxonHECSharp.Example/bin/${{ matrix.configuration }}/net9.0/runtimes/osx-arm64/native"
          Write-Host "Setting DYLD_LIBRARY_PATH to $nativeLibPath"
          $env:DYLD_LIBRARY_PATH = $nativeLibPath
        }
        
        cd SaxonHECSharp.Example
        dotnet build --configuration ${{ matrix.configuration }}
        
        # List out native libraries to verify they're in place
        if ("${{ matrix.os }}" -eq "macos-14") {
          Write-Host "Verifying native libraries..."
          Get-ChildItem -Path $nativeLibPath -Filter "*.dylib"
        }

    - name: Run tests
      if: always() && !cancelled() && (steps.build-solution.outcome == 'success' || steps.build-example.outcome == 'success')
      continue-on-error: true
      shell: pwsh
      run: |
        # Set up library path for macOS
        if ("${{ matrix.os }}" -eq "macos-14") {
          $nativeLibPath = Join-Path (Get-Location) "SaxonHECSharp.Example/bin/${{ matrix.configuration }}/net9.0/runtimes/osx-arm64/native"
          Write-Host "Setting DYLD_LIBRARY_PATH to $nativeLibPath"
          $env:DYLD_LIBRARY_PATH = $nativeLibPath
        }
        dotnet test SaxonHECSharp.sln --configuration ${{ matrix.configuration }}

    - name: Run Example Project
      working-directory: SaxonHECSharp.Example
      shell: bash
      run: |
        # Ensure the native libraries have correct permissions on Unix-like systems
        if [[ "${{ matrix.os }}" == "ubuntu-24.04" || "${{ matrix.os }}" == "macos-14" ]]; then
          chmod +x bin/${{ matrix.configuration }}/net9.0/runtimes/*/native/*
        fi
        
        # Copy test data to the output directory
        cp -r test-data/* bin/${{ matrix.configuration }}/net9.0/
        
        # Run the example project
        dotnet run --configuration ${{ matrix.configuration }} --no-build
        
        # Verify that at least one output file was generated
        output_files=$(ls bin/${{ matrix.configuration }}/net9.0/*_output.{xml,html} 2>/dev/null | wc -l)
        if [ "$output_files" -eq "0" ]; then
          echo "Error: Example project did not generate any output files"
          exit 1
        else
          echo "Success: Generated $output_files output files"
          ls -l bin/${{ matrix.configuration }}/net9.0/*_output.{xml,html}
        fi

    - name: Run Example Project
      working-directory: SaxonHECSharp.Example
      run: |
        dotnet build --configuration ${{ matrix.configuration }}
        dotnet run --configuration ${{ matrix.configuration }}

    - name: Collect native libraries
      shell: bash
      run: |
        mkdir -p artifacts/runtimes
        
        # Define the runtime identifier based on OS
        case "${{ matrix.os }}" in
          ubuntu-24.04) RID="linux-x64" ;;
          macos-14)     RID="osx-arm64" ;;
          windows-2022) RID="win-x64" ;;
        esac
        
        # Copy native libraries to artifacts
        mkdir -p "artifacts/runtimes/$RID/native"
        cp -r "SaxonHECSharp.Example/bin/${{ matrix.configuration }}/net9.0/runtimes/$RID/native/"* "artifacts/runtimes/$RID/native/"
        
        echo "Artifacts collected for $RID:"
        ls -la "artifacts/runtimes/$RID/native/"

    - name: Upload native libraries
      uses: actions/upload-artifact@v4
      with:
        name: native-${{ matrix.os }}
        path: artifacts/runtimes/

  pack:
    needs: build
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Download all native libraries
      uses: actions/download-artifact@v4
      with:
        pattern: native-*
        path: native-libs
        merge-multiple: true

    - name: Organize native libraries
      shell: bash
      run: |
        mkdir -p bin/Release/runtimes
        
        # Copy native libraries to the correct location
        for rid in linux-x64 osx-arm64 win-x64; do
          if [ -d "native-libs/$rid/native" ]; then
            mkdir -p "bin/Release/runtimes/$rid/native"
            cp -r "native-libs/$rid/native/"* "bin/Release/runtimes/$rid/native/"
            echo "âœ… Copied native libraries for $rid"
            ls -la "bin/Release/runtimes/$rid/native/"
          fi
        done

    - name: Copy native libraries to project
      shell: bash
      run: |
        # Create the runtimes directory in the project
        mkdir -p "SaxonHECSharp/bin/Release/net7.0/runtimes"
        
        # Copy all native libraries to the project's runtimes directory
        cp -r "bin/Release/runtimes/"* "SaxonHECSharp/bin/Release/net7.0/runtimes/"
        
        echo "Native libraries copied to project:"
        ls -R "SaxonHECSharp/bin/Release/net7.0/runtimes"

    - name: Pack NuGet package
      run: |
        VERSION="1.0.0"
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION=$(echo "${{ github.ref }}" | sed 's|refs/tags/v||')
        elif [[ "${{ github.ref }}" != refs/heads/main && "${{ github.ref }}" != refs/heads/master ]]; then
          BRANCH=$(echo "${GITHUB_REF#refs/heads/}" | sed 's/[^a-zA-Z0-9]/-/g')
          SHA=$(git rev-parse --short HEAD)
          VERSION="1.0.0-${BRANCH}.${SHA}"
        fi
        
        dotnet pack SaxonHECSharp/SaxonHECSharp.csproj \
          --configuration Release \
          -p:Version=$VERSION \
          --output nupkgs

    - name: Upload NuGet package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: nupkgs/*.nupkg

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: pack
    runs-on: ubuntu-24.04
    steps:
    - name: Download NuGet package
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nupkgs

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Publish to NuGet.org
      run: |
        for package in nupkgs/*.nupkg; do
          dotnet nuget push "$package" \
            --api-key "${{ secrets.NUGET_API_KEY }}" \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        done

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: pack
    runs-on: ubuntu-24.04
    steps:
    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        pattern: native-*
        path: native-artifacts
        merge-multiple: true

    - name: Download NuGet package
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nuget-artifacts

    - name: Prepare release artifacts
      run: |
        mkdir -p release-artifacts
        
        # Create platform-specific archives
        for rid in linux-x64 osx-arm64 win-x64; do
          if [ -d "native-artifacts/$rid/native" ]; then
            if [[ "$rid" == win-* ]]; then
              (cd "native-artifacts/$rid" && zip -r "../../release-artifacts/saxon-native-$rid.zip" native/)
            else
              tar -czf "release-artifacts/saxon-native-$rid.tar.gz" -C "native-artifacts/$rid" native/
            fi
          fi
        done
        
        # Copy NuGet package
        cp nuget-artifacts/*.nupkg release-artifacts/

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "release-artifacts/*"
        allowUpdates: true
        replacesArtifacts: true
        generateReleaseNotes: true
        body: |
          ## ðŸ“¦ Installation
          
          ### NuGet Package
          ```bash
          dotnet add package SaxonHECSharp
          ```
          
          ### Native Libraries
          Native libraries for each platform are included in the NuGet package.
          Standalone native libraries are also available as separate downloads if needed.
          
          ## ðŸŽ¯ Supported Platforms
          - Windows (x64)
          - Linux (x64)
          - macOS (arm64)
